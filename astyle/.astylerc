# Brace style
#
# int main() {
#
# instead of
#
# int main()
# {
--style=attach

# char *foo;
--align-pointer=name

# int foo(int &bar);
--align-reference=name

# int main() {
#
# instead of
#
# int
# main() {
--attach-return-type

# namespace foo {
#
# instead of
#
# namespace
# foo {
--attach-namespaces

# if (condition)
#     do_something();
#
# instead of
#
# if (condition) do_something();
--break-one-line-headers

# Convert all tabs to spaces
--convert-tabs

# Delete empty lines within function or method
--delete-empty-lines

# Use 4 spaces indent
# int main() {
#     foo();
# }
--indent=spaces=4

# // Comment
#
# instead of
#
# //Comment
--indent-col1-comments

# Maximum line length
--max-code-length=100

# if (foo)
#
# instead of
#
# if(foo)
--pad-header

# foo == 2
#
# instead of
#
# foo==2
--pad-oper

# if (foo(a, b))
#
# instead of
#
# if (foo(a,b))
--pad-comma

# if (bar(foo(a, b), b))
#
# instead of
#
# if ( bar( foo( a, b ), b ) )
--unpad-paren

# while (foo())
#     bar();
#
# instead of
#
# while (foo()) {
#     bar();
# }
--remove-braces

# class FooClass
# {
#     void Foo() {
#     ...
#     }
# };
--attach-inlines

# #ifdef __cplusplus
# extern "C" {
# #endif
#
# extern "C" EXPORT void STDCALL Foo()
# {}
--attach-extern-c

# do
# {
#     bar();
#     ++x;
# } while x == 1;
--attach-closing-while

# #ifdef _WIN32
#     #include <windows.h>
#     #ifndef NO_EXPORT
#         #define EXPORT
#     #endif
# #endif
--indent-preproc-block

# #define Is_Bar(arg,a,b) \
# (Is_Foo((arg), (a)) \
# || Is_Foo((arg), (b)))
# becomes:
# #define Is_Bar(arg,a,b) \
#     (Is_Foo((arg), (a)) \
#      || Is_Foo((arg), (b)))
--indent-preproc-define

# oid Foo()\n"
# {
# // comment
#     if (isFoo)
#         bar();
# }
# becomes:
# void Foo()\n"
# {
#     // comment
#     if (isFoo)
#         bar();
# }
--indent-col1-comments

--indent-lambda

--break-blocks

# #include<stdio>
# #include   <iostream>
# becomes:
# #include <stdio>
# #include <iostream>
--pad-include

# Remove superfluous empty lines exceeding the given number.
--squeeze-lines=2

# Fill empty lines with the white space of the previous line.
# --fill-empty-lines

--squeeze-ws

--add-braces

# Stack< int, List< int > > stack1;
# becomes:
# Stack< int, List< int >> stack1;
--close-templates

--break-after-logical